{
  "openapi": "3.0.3",
  "info": {
    "title": "InsightSentry API",
    "version": "3.0.0",
    "description": "Comprehensive financial data API providing access to global equities, indices, futures, options, cryptocurrencies, and forex markets with real-time and historical data.",
    "contact": {
      "name": "InsightSentry Support",
      "email": "support@insightsentry.com",
      "url": "https://insightsentry.com/"
    },
    "license": {
      "name": "Terms of Service",
      "url": "https://insightsentry.com/terms"
    }
  },
  "servers": [
    {
      "url": "https://api.insightsentry.com",
      "description": "Insightsentry API Gateway"
    },
    {
      "url": "https://insightsentry.p.rapidapi.com/",
      "description": "RapidAPI Gateway"
    }
  ],
  "paths": {
    "/v3/symbols/{symbol}/series": {
      "parameters": [
        {
          "$ref": "#/components/parameters/SymbolPathParam"
        }
      ],
      "get": {
        "summary": "Recent historical data (up to 25k bars) with real-time data option",
        "description": "Retrieve recent historical OHLCV data with real-time data option for a symbol with configurable time intervals and adjustments",
        "parameters": [
          {
            "$ref": "#/components/parameters/BarTypeParam"
          },
          {
            "$ref": "#/components/parameters/BarIntervalParam"
          },
          {
            "$ref": "#/components/parameters/ExtendedParam"
          },
          {
            "$ref": "#/components/parameters/DividendAdjustmentParam"
          },
          {
            "$ref": "#/components/parameters/BackAdjustmentParam"
          },
          {
            "$ref": "#/components/parameters/DataPointsParam"
          },
          {
            "$ref": "#/components/parameters/RealtimeParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/HistoricalDataResponse"
          }
        }
      }
    },
    "/v3/symbols/{symbol}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/SymbolPathParam"
        }
      ],
      "get": {
        "summary": "Deep historical data",
        "description": "Retrieve historical data for specific time periods with deep archive access",
        "parameters": [
          {
            "name": "bar_type",
            "in": "query",
            "required": true,
            "description": "(Required) Bar type.",
            "example": "minute",
            "schema": {
              "type": "string",
              "enum": [
                "second",
                "minute",
                "hour"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/BarIntervalParam"
          },
          {
            "name": "start_ym",
            "in": "query",
            "required": true,
            "description": "Starting period in YYYY-MM format for minute/hour intervals or YYYY-MM-DD for second intervals (UTC)",
            "example": "2024-04",
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "^\\d{4}-\\d{2}(-\\d{2})?$"
            }
          },
          {
            "$ref": "#/components/parameters/ExtendedParam"
          },
          {
            "$ref": "#/components/parameters/DividendAdjustmentParam"
          },
          {
            "$ref": "#/components/parameters/BackAdjustmentParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/HistoricalDataResponse"
          }
        }
      }
    },
    "/v3/symbols/{symbol}/info": {
      "parameters": [
        {
          "$ref": "#/components/parameters/SymbolPathParam"
        }
      ],
      "get": {
        "summary": "Symbol information and metadata",
        "description": "Retrieve detailed information about a symbol including type, currency, market data, earnings dates, and option information",
        "parameters": [],
        "responses": {
          "200": {
            "headers": {},
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "$ref": "#/components/schemas/SymbolCode"
                    },
                    "type": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "currency_code": {
                      "type": "string"
                    },
                    "country_code": {
                      "type": "string"
                    },
                    "average_volume": {
                      "type": "integer"
                    },
                    "open_time": {
                      "type": "integer"
                    },
                    "regular_close_time": {
                      "type": "integer"
                    },
                    "regular_close_price": {
                      "type": "number"
                    },
                    "prev_close_price": {
                      "type": "number"
                    },
                    "total_revenue": {
                      "type": "integer"
                    },
                    "market_cap": {
                      "type": "integer"
                    },
                    "dps_common_stock_primary_issue_fy": {
                      "type": "number"
                    },
                    "earnings_per_share_fq": {
                      "type": "number"
                    },
                    "earnings_per_share_basic_ttm": {
                      "type": "number"
                    },
                    "earnings_per_share_forecast_next_fq": {
                      "type": "number"
                    },
                    "earnings_release_date": {
                      "type": "integer"
                    },
                    "earnings_release_next_date": {
                      "type": "integer"
                    },
                    "dividends_yield": {
                      "type": "number"
                    },
                    "price_earnings_ttm": {
                      "type": "number"
                    },
                    "point_value": {
                      "type": "integer"
                    },
                    "minimum_movement": {
                      "type": "integer"
                    },
                    "all_time_high": {
                      "type": "number"
                    },
                    "all_time_high_day": {
                      "type": "integer"
                    },
                    "all_time_low": {
                      "type": "number"
                    },
                    "all_time_low_day": {
                      "type": "integer"
                    },
                    "option_info": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "series": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "expiration_date": {
                                  "type": "integer"
                                },
                                "underlying": {
                                  "$ref": "#/components/schemas/SymbolCode"
                                },
                                "strikes": {
                                  "type": "array",
                                  "items": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/symbols/{symbol}/session": {
      "parameters": [
        {
          "$ref": "#/components/parameters/SymbolPathParam"
        }
      ],
      "get": {
        "summary": "Trading session information",
        "description": "Retrieve trading session details including holidays, trading hours, timezone, and session corrections",
        "responses": {
          "200": {
            "headers": {},
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "$ref": "#/components/schemas/SymbolCode"
                    },
                    "holidays": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "utc-millisec"
                      }
                    },
                    "start_hour": {
                      "type": "string",
                      "format": "utc-millisec"
                    },
                    "end_hour": {
                      "type": "string",
                      "format": "utc-millisec"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "session_correction": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "start_hour": {
                                  "type": "string",
                                  "format": "utc-millisec"
                                },
                                "end_hour": {
                                  "type": "string",
                                  "format": "utc-millisec"
                                },
                                "dates": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "format": "utc-millisec"
                                  }
                                }
                              }
                            }
                          },
                          "session": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "currency_code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "timezone": {
                      "type": "string"
                    },
                    "last_update": {
                      "type": "integer"
                    },
                    "tick_size": {
                      "type": "string"
                    },
                    "price_scale": {
                      "type": "integer"
                    },
                    "point_value": {
                      "type": "integer"
                    },
                    "minimum_movement": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/symbols/quotes": {
      "parameters": [],
      "get": {
        "summary": "Real-time quote data",
        "description": "Retrieve real-time quote data for up to 10 symbols",
        "parameters": [
          {
            "name": "codes",
            "in": "query",
            "required": true,
            "description": "Comma-separated list of symbol codes in Exchange:Symbol format. Each code must match the SymbolCode pattern.",
            "example": "CME_MINI:NQ1!,CME_MINI:ES1!,NASDAQ:TSLA",
            "schema": {
              "type": "string",
              "pattern": "^([A-Z0-9_./]+:[A-Z0-9_./!]+)(,[A-Z0-9_./]+:[A-Z0-9_./!]+)*$"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/QuotesResponse"
          }
        }
      }
    },
    "/v3/symbols/search": {
      "get": {
        "summary": "Search for symbols",
        "description": "Search for financial instruments. This v3 endpoint differs from /v2/symbols/search. Use /v3 for paginated search results.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "description": "Search query string",
            "example": "apple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "example": "stock",
            "description": "Filter by instrument type",
            "schema": {
              "type": "string",
              "enum": [
                "crypto",
                "index",
                "forex",
                "futures",
                "stock",
                "economic",
                "etf",
                "reit",
                "mutual_fund",
                "trust_fund",
                "bond",
                "bond_gov",
                "bond_corp",
                "common_stock",
                "depository_receipt",
                "fund",
                "preferred_stock",
                "warrant",
                "crypto_spot",
                "crypto_fundamental",
                "crypto_swap",
                "crypto_futures",
                "crypto_index",
                "none"
              ]
            }
          },
          {
            "name": "country",
            "in": "query",
            "required": false,
            "example": "US",
            "description": "Filter by country. 2-letter ISO code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "example": "1",
            "description": "Each page returns up to 50 results.",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with symbol data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "current_page",
                    "has_more",
                    "symbols"
                  ],
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "description": "Current page number",
                      "minimum": 1
                    },
                    "has_more": {
                      "type": "boolean",
                      "description": "Whether there are more results available"
                    },
                    "symbols": {
                      "type": "array",
                      "description": "Array of symbol objects",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "code"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Symbol name"
                          },
                          "code": {
                            "type": "string",
                            "description": "Full symbol code (e.g., NASDAQ:AAPL)"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of financial instrument"
                          },
                          "exchange": {
                            "type": "string",
                            "description": "Exchange where the symbol is traded"
                          },
                          "currency_code": {
                            "type": "string",
                            "description": "Currency code for the symbol"
                          },
                          "country": {
                            "type": "string",
                            "description": "Country where the symbol is from"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the symbol"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v3/symbols/{symbol}/fundamentals": {
      "parameters": [
        {
          "$ref": "#/components/parameters/SymbolPathParam"
        }
      ],
      "get": {
        "summary": "Fundamental data and statistics",
        "description": "Retrieve comprehensive fundamental data including company info, valuation ratios, profitability metrics, balance sheet, cash flow, income statement, and more",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response with fundamental data and values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundamentalsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/symbols/{symbol}/fundamentals/series": {
      "parameters": [
        {
          "$ref": "#/components/parameters/SymbolPathParam"
        }
      ],
      "get": {
        "summary": "Historical fundamental data",
        "description": "Retrieve historical data for specific indicators. A maximum of 5 Indicator IDs can be requested at a time. The list of available Indicator IDs is provided in the fundamental_series and technical_series fields of the /v3/symbols/fundamentals endpoint. Some parameters may not apply to certain Indicator IDs, and not all indicators are supported for every symbol.",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "description": "(Required) Comma-separated list of indicator IDs (maximum 5). Available IDs can be retrieved from /v3/symbols/fundamentals endpoint's 'fundamental_series' and 'technical_series' fields.",
            "example": "diluted_shares_outstanding_fy,ebit_fq",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/BarTypeParam"
          },
          {
            "$ref": "#/components/parameters/BarIntervalParam"
          },
          {
            "$ref": "#/components/parameters/ExtendedParam"
          },
          {
            "$ref": "#/components/parameters/DividendAdjustmentParam"
          },
          {
            "$ref": "#/components/parameters/BackAdjustmentParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with fundamental time series data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundamentalsSeriesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/symbols/fundamentals": {
      "parameters": [],
      "get": {
        "summary": "Meta data for /fundamentals endpoints",
        "description": "Retrieve the fundamentals schema and metadata. This endpoint returns the layout and definitions only — it does not include actual data, which are provided by /v3/symbols/{symbol}/fundamentals.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response with fundamental metadata without values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FundamentalsMetaResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v3/options/list": {
      "parameters": [],
      "get": {
        "summary": "List available options",
        "description": "Retrieve list of available option contracts for a given symbol",
        "parameters": [
          {
            "$ref": "#/components/parameters/SymbolCodeQueryParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionListResponse"
          }
        }
      }
    },
    "/v3/options/expiration": {
      "get": {
        "summary": "Option chain by expiration",
        "description": "Retrieve option chain data for a specific expiration date",
        "parameters": [
          {
            "$ref": "#/components/parameters/SymbolCodeQueryParam"
          },
          {
            "name": "expiration",
            "in": "query",
            "required": true,
            "description": "(Required) Expiration Date",
            "example": "2027-06-17",
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
            }
          },
          {
            "$ref": "#/components/parameters/SortByParam"
          },
          {
            "$ref": "#/components/parameters/SortOrderParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionDataResponse"
          }
        }
      }
    },
    "/v3/options/strike": {
      "get": {
        "summary": "Option chain by strike price",
        "description": "Retrieve option chain data for a specific strike price",
        "parameters": [
          {
            "$ref": "#/components/parameters/SymbolCodeQueryParam"
          },
          {
            "name": "strike",
            "in": "query",
            "required": true,
            "description": "(Required) Strike Price",
            "example": "210",
            "schema": {
              "type": "number",
              "minimum": 0
            }
          },
          {
            "$ref": "#/components/parameters/SortByParam"
          },
          {
            "$ref": "#/components/parameters/SortOrderParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OptionDataResponse"
          }
        }
      }
    },
    "/v3/calendar/dividends": {
      "parameters": [],
      "get": {
        "summary": "Dividend calendar",
        "description": "Retrieve dividend calendar data for a specified time range",
        "parameters": [
          {
            "$ref": "#/components/parameters/WeekRangeParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DividendResponse"
          }
        }
      }
    },
    "/v3/calendar/earnings": {
      "get": {
        "summary": "Earnings calendar",
        "description": "Retrieve earnings calendar data for a specified time range",
        "parameters": [
          {
            "$ref": "#/components/parameters/WeekRangeParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EarningsResponse"
          }
        }
      }
    },
    "/v3/calendar/events": {
      "parameters": [],
      "get": {
        "summary": "Economic events calendar",
        "description": "Retrieve economic events calendar data for a specified time range",
        "parameters": [
          {
            "$ref": "#/components/parameters/WeekRangeParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EconomicEventsResponse"
          }
        }
      }
    },
    "/v3/newsfeed": {
      "parameters": [],
      "get": {
        "summary": "News feed",
        "description": "Retrieve latest financial news with optional keyword filtering",
        "parameters": [
          {
            "name": "keywords",
            "in": "query",
            "required": false,
            "description": "(Optional) Keywords to include items that match one of the keywords in the title or content, separated by a comma. e.g. apple,tesla",
            "schema": {
              "type": "string",
              "pattern": "^([a-zA-Z0-9_!/:-]+)(,[a-zA-Z0-9_!/:-]+)*$"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "example": "1",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NewsfeedResponse"
          }
        }
      }
    },
    "/v3/screeners/stock": {
      "get": {
        "summary": "Get available stock screener parameters",
        "description": "Retrieve the list of available fields and parameters for stock screening",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ScreenerParametersResponse"
          }
        }
      },
      "post": {
        "summary": "Stock Screener",
        "description": "Retrieve stock data based on specified filter criteria",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ScreenerDataResponse"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ScreenerRequest"
                  },
                  {
                    "description": "Flexible request body similar to GraphQL. You can include any filter criteria beyond the fixed properties (fields, exchanges, countries, page, sortBy, sortOrder). Common examples include: market_cap_min, market_cap_max, volume_min, volume_max, price_min, price_max, etc."
                  }
                ]
              },
              "example": {
                "fields": [
                  "close",
                  "volume",
                  "market_cap"
                ],
                "exchanges": [
                  "NYSE",
                  "NASDAQ"
                ],
                "countries": [
                  "US",
                  "CA"
                ],
                "page": 1,
                "sortBy": "market_cap",
                "sortOrder": "desc"
              }
            }
          }
        }
      }
    },
    "/v3/screeners/etf": {
      "get": {
        "summary": "Get available ETF screener parameters",
        "description": "Retrieve the list of available fields and parameters for ETF screening",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ScreenerParametersResponse"
          }
        }
      },
      "post": {
        "summary": "ETF Screener",
        "description": "Retrieve ETF data based on specified filter criteria",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ScreenerDataResponse"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ScreenerRequest"
                  },
                  {
                    "description": "Flexible request body similar to GraphQL. You can include any filter criteria beyond the fixed properties (fields, exchanges, countries, page, sortBy, sortOrder). Common examples include: asset_class, expense_ratio_min, expense_ratio_max, aum_min, aum_max, etc."
                  }
                ]
              },
              "example": {
                "fields": [
                  "close",
                  "volume",
                  "nav"
                ],
                "exchanges": [
                  "NYSE",
                  "NASDAQ"
                ],
                "countries": [
                  "US",
                  "CA"
                ],
                "page": 1,
                "sortBy": "nav",
                "sortOrder": "desc"
              }
            }
          }
        }
      }
    },
    "/v3/screeners/bond": {
      "get": {
        "summary": "Get available bond screener parameters",
        "description": "Retrieve the list of available fields and parameters for bond screening",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ScreenerParametersResponse"
          }
        }
      },
      "post": {
        "summary": "Bond Screener",
        "description": "Retrieve bond data based on specified filter criteria",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ScreenerDataResponse"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ScreenerRequest"
                  },
                  {
                    "description": "Flexible request body similar to GraphQL. You can include any filter criteria beyond the fixed properties (fields, exchanges, countries, page, sortBy, sortOrder). Common examples include: yield_min, yield_max, duration_min, duration_max, credit_rating, maturity_date_range, etc."
                  }
                ]
              },
              "example": {
                "fields": [
                  "close_percent",
                  "yield_to_maturity",
                  "volume"
                ],
                "exchanges": [],
                "countries": [
                  "US"
                ],
                "page": 1,
                "sortBy": "yield_to_maturity",
                "sortOrder": "desc"
              }
            }
          }
        }
      }
    },
    "/v3/screeners/crypto": {
      "get": {
        "summary": "Get available crypto screener parameters",
        "description": "Retrieve the list of available fields and parameters for crypto screening",
        "responses": {
          "200": {
            "description": "Available crypto screener parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available_fields": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "sortOrder": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Crypto Screener",
        "description": "Retrieve cryptocurrency data based on specified filter criteria",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ScreenerDataResponse"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Crypto screener request body",
                "properties": {
                  "fields": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_]+$",
                      "example": "close"
                    },
                    "description": "Array of field names to include in the response. You can find available fields in the Get Screener endpoint. At least one field must be specified, up to 10 fields maximum."
                  },
                  "page": {
                    "type": "integer",
                    "default": 1,
                    "description": "Page number for pagination"
                  },
                  "sortBy": {
                    "type": "string",
                    "default": "name",
                    "description": "Field name to sort by. It should be one of fields you specify. If not specified, it will sort by the symbol name."
                  },
                  "sortOrder": {
                    "type": "string",
                    "default": "asc",
                    "enum": [
                      "asc",
                      "desc"
                    ],
                    "description": "Sort order - ascending or descending"
                  }
                },
                "required": [
                  "fields"
                ],
                "additionalProperties": true
              },
              "example": {
                "fields": [
                  "close",
                  "volume",
                  "market_cap"
                ],
                "page": 1,
                "sortBy": "market_cap",
                "sortOrder": "desc"
              }
            }
          }
        }
      }
    },
    "/v2/websocket-key": {
      "servers": [
        {
          "url": "https://insightsentry.p.rapidapi.com/",
          "description": "Only for RapidAPI users."
        }
      ],
      "parameters": [],
      "get": {
        "summary": "Get WebSocket authentication key",
        "description": "Retrieve WebSocket Key, which expires every 7 days. This is only for RapidAPI users",
        "responses": {
          "200": {
            "headers": {},
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "api_key": {
                      "type": "string"
                    },
                    "expiration": {
                      "type": "integer",
                      "description": "Unix timestamp (seconds) when the key expires"
                    },
                    "note": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SymbolCode": {
        "type": "string",
        "description": "Symbol code in Exchange:Symbol format",
        "example": "NASDAQ:AAPL",
        "pattern": "^[A-Z0-9_./]+:[A-Z0-9_./!]+$"
      },
      "UnixTimestamp": {
        "type": "number",
        "description": "Unix timestamp (seconds)",
        "example": 1717238400.0
      },
      "UnixTimestampMs": {
        "type": "integer",
        "description": "Unix timestamp (milliseconds)",
        "example": 1717238400000
      },
      "OHLCV": {
        "type": "object",
        "description": "Open, High, Low, Close, Volume data point",
        "properties": {
          "time": {
            "$ref": "#/components/schemas/UnixTimestamp"
          },
          "open": {
            "type": "number",
            "description": "Open price of the bar",
            "example": 100.0
          },
          "high": {
            "type": "number",
            "description": "High price of the bar",
            "example": 105.0
          },
          "low": {
            "type": "number",
            "description": "Low price of the bar",
            "example": 100.0
          },
          "close": {
            "type": "number",
            "description": "Close price of the bar or the last price for real-time data",
            "example": 102.5
          },
          "volume": {
            "type": "number",
            "description": "Trading volume for the bar",
            "example": 120.0
          }
        }
      },
      "HistoricalDataResponse": {
        "type": "object",
        "description": "Standard historical data response format",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/SymbolCode"
          },
          "bar_end": {
            "$ref": "#/components/schemas/UnixTimestamp",
            "description": "Unix timestamp (seconds) marking the end time of the most recent (or real-time) bar"
          },
          "last_update": {
            "$ref": "#/components/schemas/UnixTimestampMs",
            "description": "The last update time in Unix timestamp (milliseconds)"
          },
          "_ct": {
            "$ref": "#/components/schemas/UnixTimestampMs",
            "description": "Unix timestamp (milliseconds) for performance tracking"
          },
          "bar_type": {
            "type": "string",
            "description": "The type of bar used for historical data",
            "example": "1m"
          },
          "series": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OHLCV"
            }
          }
        }
      },
      "QuoteData": {
        "type": "object",
        "description": "Real-time quote information for a symbol",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/SymbolCode"
          },
          "status": {
            "type": "string",
            "description": "The status of the market",
            "example": "CLOSED",
            "enum": [
              "OPEN",
              "CLOSED",
              "PRE",
              "POST",
              "HOLIDAYS"
            ]
          },
          "lp_time": {
            "$ref": "#/components/schemas/UnixTimestamp",
            "description": "Unix timestamp (seconds) of the last price update"
          },
          "volume": {
            "type": "number",
            "description": "The trading volume for the symbol",
            "example": 120.0
          },
          "last_price": {
            "type": "number",
            "description": "The last traded price for the symbol",
            "example": 150.0
          },
          "change_percent": {
            "type": "number",
            "description": "The percentage change in price",
            "example": 1.5
          },
          "change": {
            "type": "number",
            "description": "The absolute change in price",
            "example": 2.0
          },
          "ask": {
            "type": "number",
            "description": "The current lowest ask price for the symbol",
            "example": 151.0
          },
          "bid": {
            "type": "number",
            "description": "The current highest bid price for the symbol",
            "example": 149.0
          },
          "ask_size": {
            "type": "number",
            "description": "The size of the current ask order",
            "example": 10.0
          },
          "bid_size": {
            "type": "number",
            "description": "The size of the current bid order",
            "example": 5.0
          },
          "market_cap": {
            "type": "number",
            "description": "The market capitalization of the symbol",
            "example": 2500000000.0
          },
          "delay_seconds": {
            "type": "integer",
            "description": "The delay in seconds for the market data",
            "example": 900
          },
          "prev_close_price": {
            "type": "number",
            "description": "The previous trading day's closing price for the symbol",
            "example": 148.0
          },
          "open_price": {
            "type": "number",
            "description": "The opening price for the symbol",
            "example": 149.0
          },
          "low_price": {
            "type": "number",
            "description": "The lowest price for the symbol during the trading session",
            "example": 147.5
          },
          "high_price": {
            "type": "number",
            "description": "The highest price for the symbol during the trading session",
            "example": 152.0
          }
        }
      },
      "SymbolsData": {
        "type": "object",
        "required": [
          "name",
          "code"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Symbol name"
          },
          "code": {
            "type": "string",
            "description": "Full symbol code (e.g., NASDAQ:AAPL)"
          },
          "type": {
            "type": "string",
            "description": "Type of financial instrument"
          },
          "exchange": {
            "type": "string",
            "description": "Exchange where the symbol is traded"
          },
          "currency_code": {
            "type": "string",
            "description": "Currency code for the symbol"
          },
          "country": {
            "type": "string",
            "description": "Country where the symbol is from"
          },
          "description": {
            "type": "string",
            "description": "Description of the symbol"
          }
        }
      },
      "OptionData": {
        "type": "object",
        "description": "Option contract data",
        "properties": {
          "code": {
            "type": "string"
          },
          "ask_price": {
            "type": "number"
          },
          "bid_price": {
            "type": "number"
          },
          "delta": {
            "type": "number"
          },
          "gamma": {
            "type": "number"
          },
          "implied_volatility": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "rho": {
            "type": "number"
          },
          "strike_price": {
            "type": "integer"
          },
          "theoretical_price": {
            "type": "number"
          },
          "theta": {
            "type": "number"
          },
          "vega": {
            "type": "number"
          },
          "bid_iv": {
            "type": "number"
          },
          "ask_iv": {
            "type": "number"
          },
          "expiration": {
            "type": "integer",
            "description": "Expiration date in YYYYMMDD format",
            "example": 20260618
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "description": "Standard paginated response format",
        "properties": {
          "hasNext": {
            "type": "boolean"
          },
          "current_page": {
            "type": "integer"
          },
          "total_page": {
            "type": "integer"
          },
          "current_items": {
            "type": "integer"
          }
        }
      },
      "ScreenerRequest": {
        "type": "object",
        "description": "Base screener request format",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_]+$",
              "example": "close"
            },
            "description": "Array of field names to include in the response. You can find available fields in the Get Screener endpoint. At least one field must be specified, up to 10 fields maximum."
          },
          "exchanges": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "NYSE"
            },
            "description": "Array of exchange names to filter by (e.g., [\"NYSE\", \"NASDAQ\"]). If not specified or empty, no exchange filtering will be applied."
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "US"
            },
            "description": "Array of country codes to filter by (e.g., [\"US\", \"CA\"]). If not specified or empty, no country filtering will be applied."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "description": "Page number for pagination"
          },
          "sortBy": {
            "type": "string",
            "default": "name",
            "description": "Field name to sort by. It should be one of fields you specify. If not specified, it will sort by the symbol name."
          },
          "sortOrder": {
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "description": "Sort order: ascending or descending"
          }
        },
        "additionalProperties": true,
        "required": [
          "fields"
        ]
      },
      "QuotesResponseData": {
        "type": "object",
        "description": "Quotes response data schema",
        "properties": {
          "total_items": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuoteData"
            }
          }
        }
      },
      "OptionListResponseData": {
        "type": "object",
        "description": "Option list response data schema",
        "properties": {
          "last_update": {
            "$ref": "#/components/schemas/UnixTimestampMs"
          },
          "codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SymbolCode"
            }
          }
        }
      },
      "OptionDataResponseData": {
        "type": "object",
        "description": "Option data response schema",
        "properties": {
          "underlying_code": {
            "$ref": "#/components/schemas/SymbolCode"
          },
          "last_update": {
            "$ref": "#/components/schemas/UnixTimestampMs"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionData"
            }
          }
        }
      },
      "ScreenerParametersResponseData": {
        "type": "object",
        "description": "Screener parameters response data schema",
        "properties": {
          "available_fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "available_exchanges": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "available_countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sortOrder": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ScreenerDataResponseData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginatedResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Flexible data object containing the requested fields"
                }
              }
            }
          }
        ]
      },
      "DividendResponseData": {
        "type": "object",
        "description": "Dividend calendar response data schema",
        "properties": {
          "total_count": {
            "type": "integer"
          },
          "range": {
            "type": "string"
          },
          "last_update": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DividendData"
            }
          }
        }
      },
      "DividendData": {
        "type": "object",
        "description": "Individual dividend record",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/SymbolCode"
          },
          "dividend_ex_date_recent": {
            "type": "integer"
          },
          "dividend_ex_date_upcoming": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "dividends_yield": {
            "type": "number"
          },
          "dividend_payment_date_recent": {
            "type": "integer"
          },
          "dividend_payment_date_upcoming": {
            "type": "integer"
          },
          "dividend_amount_recent": {
            "type": "number"
          },
          "dividend_amount_upcoming": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "market_cap": {
            "type": "number"
          }
        }
      },
      "EarningsResponseData": {
        "type": "object",
        "description": "Earnings calendar response data schema",
        "properties": {
          "total_count": {
            "type": "integer"
          },
          "range": {
            "type": "string"
          },
          "last_update": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EarningsData"
            }
          }
        }
      },
      "EarningsData": {
        "type": "object",
        "description": "Individual earnings record",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/SymbolCode"
          },
          "earnings_release_next_date": {
            "type": "integer"
          },
          "earnings_release_date": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "earnings_per_share_fq": {
            "type": "number"
          },
          "earnings_per_share_forecast_next_fq": {
            "type": "number"
          },
          "eps_surprise_fq": {
            "type": "number"
          },
          "eps_surprise_percent_fq": {
            "type": "number"
          },
          "revenue_fq": {
            "type": "integer"
          },
          "revenue_forecast_next_fq": {
            "type": "integer"
          },
          "market_cap": {
            "type": "integer"
          },
          "earnings_per_share_forecast_fq": {
            "type": "number"
          },
          "revenue_forecast_fq": {
            "type": "integer"
          },
          "currency_code": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "revenue_surprise_fq": {
            "type": "integer"
          },
          "revenue_surprise_percent_fq": {
            "type": "number"
          }
        }
      },
      "EconomicEventsResponseData": {
        "type": "object",
        "description": "Economic events calendar response data schema",
        "properties": {
          "total_count": {
            "type": "integer"
          },
          "range": {
            "type": "string"
          },
          "last_update": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EconomicEventData"
            }
          }
        }
      },
      "EconomicEventData": {
        "type": "object",
        "description": "Individual economic event record",
        "properties": {
          "title": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "source_url": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "importance": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NewsfeedResponseData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginatedResponse"
          },
          {
            "type": "object",
            "properties": {
              "last_update": {
                "type": "integer"
              },
              "total_items": {
                "type": "integer"
              },
              "current_items": {
                "type": "integer"
              },
              "page": {
                "type": "integer"
              },
              "has_next": {
                "type": "boolean"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NewsItem"
                }
              }
            }
          }
        ]
      },
      "NewsItem": {
        "type": "object",
        "description": "Individual news item",
        "properties": {
          "link": {
            "type": "string",
            "format": "uri"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "published_at": {
            "type": "integer"
          },
          "related_symbols": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Fundamental": {
        "type": "object",
        "description": "Fundamental data point with metadata and value",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the fundamental metric",
            "example": "net_income_fy"
          },
          "name": {
            "type": "string",
            "description": "Display name of the fundamental metric",
            "example": "Net income"
          },
          "category": {
            "type": "string",
            "description": "Category of the fundamental metric",
            "example": "Income statements"
          },
          "group": {
            "type": "string",
            "description": "Subcategory or grouping within the category",
            "example": "Per share metrics"
          },
          "type": {
            "type": "string",
            "description": "Data type of the fundamental value",
            "enum": [
              "number",
              "array",
              "string"
            ],
            "example": "number"
          },
          "period": {
            "type": "string",
            "description": "Time period for the fundamental data",
            "example": "FY"
          },
          "value": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "string"
                    },
                    {
                      "type": "object",
                      "additionalProperties": true
                    }
                  ]
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "The actual fundamental value (only present in /v3/symbols/{symbol}/fundamentals endpoint)"
          }
        },
        "required": [
          "id"
        ]
      },
      "FundamentalWithoutValue": {
        "type": "object",
        "description": "Fundamental data point metadata without the value field",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the fundamental metric",
            "example": "net_income_fy"
          },
          "name": {
            "type": "string",
            "description": "Display name of the fundamental metric",
            "example": "Net income"
          },
          "category": {
            "type": "string",
            "description": "Category of the fundamental metric",
            "example": "Income statements"
          },
          "group": {
            "type": "string",
            "description": "Subcategory or grouping within the category",
            "example": "Per share metrics"
          },
          "type": {
            "type": "string",
            "description": "Data type of the fundamental value",
            "enum": [
              "number",
              "array",
              "string"
            ],
            "example": "number"
          },
          "period": {
            "type": "string",
            "description": "Time period for the fundamental data",
            "example": "FY"
          }
        },
        "required": [
          "id"
        ]
      },
      "FundamentalsResponse": {
        "type": "object",
        "description": "Response containing fundamental data with values",
        "properties": {
          "code": {
            "type": "string",
            "description": "Symbol code",
            "example": "NASDAQ:AAPL"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fundamental"
            },
            "description": "Array of fundamental data with values"
          },
          "last_update": {
            "$ref": "#/components/schemas/UnixTimestampMs",
            "description": "The last update time in Unix timestamp (milliseconds)"
          }
        }
      },
      "FundamentalsMetaResponse": {
        "type": "object",
        "description": "Response containing fundamental data's base structure without values and available individual indicators",
        "properties": {
          "base": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FundamentalWithoutValue"
            },
            "description": "Array of fundamental metadata without values"
          },
          "fundamental_series": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the indicator",
                  "example": "unusual_expense_inc_fh"
                },
                "name": {
                  "type": "string",
                  "description": "Display name of the indicator",
                  "example": "Unusual income/expense"
                }
              },
              "description": "List of available individual fundamental indicators. This can be used at /v3/symbols/{symbol}/fundamentals/{id}"
            }
          },
          "technical_series": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the technical indicator",
                  "example": "unusual_expense_inc_fh"
                },
                "name": {
                  "type": "string",
                  "description": "Display name of the technical indicator",
                  "example": "Unusual income/expense"
                }
              },
              "description": "List of available individual technical indicators. This can be used at /v3/symbols/{symbol}/fundamentals/{id}"
            }
          },
          "last_update": {
            "$ref": "#/components/schemas/UnixTimestampMs",
            "description": "The last update time in Unix timestamp (milliseconds)"
          }
        }
      },
      "FundamentalsSeriesResponse": {
        "type": "object",
        "description": "Response containing fundamental time series data",
        "properties": {
          "last_update": {
            "$ref": "#/components/schemas/UnixTimestampMs",
            "description": "The last update time in Unix timestamp (milliseconds)"
          },
          "total_items": {
            "type": "integer",
            "description": "Total number of fundamental indicators in response",
            "example": 2
          },
          "code": {
            "$ref": "#/components/schemas/SymbolCode",
            "description": "Symbol code"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fundamental indicator ID",
                  "example": "diluted_shares_outstanding_fy"
                },
                "name": {
                  "type": "string",
                  "description": "Display name of the fundamental indicator",
                  "example": "FY Diluted shares outstanding"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "time": {
                        "$ref": "#/components/schemas/UnixTimestamp",
                        "description": "Unix timestamp (seconds) for the data point"
                      },
                      "close": {
                        "type": "number",
                        "description": "The fundamental value for this time period",
                        "example": 23992607992.584
                      }
                    },
                    "required": [
                      "time",
                      "close"
                    ]
                  },
                  "description": "Historical time series data points for the fundamental indicator"
                }
              },
              "required": [
                "id",
                "name",
                "data"
              ]
            },
            "description": "Array of fundamental indicators with their historical data"
          }
        },
        "required": [
          "last_update",
          "total_items",
          "code",
          "data"
        ]
      }
    },
    "parameters": {
      "SymbolPathParam": {
        "name": "symbol",
        "in": "path",
        "required": true,
        "description": "Symbol in Exchange:Symbol format (e.g., NASDAQ:AAPL, NYSE:TSLA). You can search for this symbol code using the /v3/symbols/search endpoint.",
        "example": "NASDAQ:AAPL",
        "schema": {
          "$ref": "#/components/schemas/SymbolCode"
        }
      },
      "SymbolCodeQueryParam": {
        "name": "code",
        "in": "query",
        "required": true,
        "description": "(Required) Symbol code",
        "example": "NASDAQ:AAPL",
        "schema": {
          "$ref": "#/components/schemas/SymbolCode"
        }
      },
      "BarTypeParam": {
        "name": "bar_type",
        "in": "query",
        "required": false,
        "description": "(Optional) Bar type. Default is 'day'",
        "example": "day",
        "schema": {
          "type": "string",
          "default": "day",
          "enum": [
            "tick",
            "second",
            "minute",
            "hour",
            "day",
            "week",
            "month"
          ]
        }
      },
      "BarIntervalParam": {
        "name": "bar_interval",
        "in": "query",
        "required": false,
        "description": "(Optional) Bar intervals. The combination of bar_type and bar_interval must not exceed one year. Default is 1.",
        "example": 1,
        "schema": {
          "type": "integer",
          "default": 1,
          "minimum": 1,
          "maximum": 1440
        }
      },
      "ExtendedParam": {
        "name": "extended",
        "in": "query",
        "required": false,
        "description": "(Optional) Extended hours (Not all assets support extended hours). Default to true.",
        "example": "true",
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "DividendAdjustmentParam": {
        "name": "dadj",
        "in": "query",
        "required": false,
        "description": "(Optional) Dividend adjustment for equities and etfs (has no effect on assets without dividends). Default to false.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "BackAdjustmentParam": {
        "name": "badj",
        "in": "query",
        "required": false,
        "description": "(Optional) Back-adjustment for continous futures contracts (has no effect on non-continous futures data). Default to true.",
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "RealtimeParam": {
        "name": "long_poll",
        "in": "query",
        "required": false,
        "description": "(Optional) If true, the server will wait up to 3 additional seconds for a real-time data before responding. Default is false.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "WeekRangeParam": {
        "name": "w",
        "in": "query",
        "required": false,
        "description": "Specifies the week range. For example, 1 means this week (starting today) through next week, 2 means next week through the following week, and so on.",
        "example": "1",
        "schema": {
          "type": "integer",
          "default": 1,
          "minimum": 1
        }
      },
      "SortByParam": {
        "name": "sortBy",
        "in": "query",
        "required": false,
        "description": "(Optional) Sort by specified field",
        "example": "type",
        "schema": {
          "type": "string",
          "default": "type",
          "enum": [
            "type",
            "ask_price",
            "bid_price",
            "delta",
            "gamma",
            "expiration",
            "implied_volatility",
            "rho",
            "strike_price",
            "theoretical_price",
            "theta",
            "vega"
          ]
        }
      },
      "SortOrderParam": {
        "name": "sort",
        "in": "query",
        "required": false,
        "description": "(Optional) Sort order",
        "example": "asc",
        "schema": {
          "type": "string",
          "default": "asc",
          "enum": [
            "asc",
            "desc"
          ]
        }
      },
      "DataPointsParam": {
        "name": "dp",
        "in": "query",
        "required": false,
        "description": "(Optional) Maximum number of data points to return. Higher values may increase latency. Default is 3000. Supported values: 1 - 25000",
        "example": "3000",
        "schema": {
          "type": "integer",
          "default": 3000,
          "minimum": 1,
          "maximum": 25000
        }
      }
    },
    "responses": {
      "HistoricalDataResponse": {
        "description": "Successful historical data response",
        "headers": {
          "x-server-location": {
            "description": "Server location identifier",
            "schema": {
              "type": "string",
              "example": "R:ASIA-SOUTHEAST"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HistoricalDataResponse"
            }
          }
        }
      },
      "QuotesResponse": {
        "description": "Successful quotes response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/QuotesResponseData"
            }
          }
        }
      },
      "OptionListResponse": {
        "description": "Available option contracts",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OptionListResponseData"
            }
          }
        }
      },
      "OptionDataResponse": {
        "description": "Option chain data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OptionDataResponseData"
            }
          }
        }
      },
      "ScreenerParametersResponse": {
        "description": "Available screener parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ScreenerParametersResponseData"
            }
          }
        }
      },
      "ScreenerDataResponse": {
        "description": "Screener results",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ScreenerDataResponseData"
            }
          }
        }
      },
      "DividendResponse": {
        "description": "Dividend calendar data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DividendResponseData"
            }
          }
        }
      },
      "EarningsResponse": {
        "description": "Earnings calendar data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EarningsResponseData"
            }
          }
        }
      },
      "EconomicEventsResponse": {
        "description": "Economic events calendar data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EconomicEventsResponseData"
            }
          }
        }
      },
      "NewsfeedResponse": {
        "description": "Newsfeed data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewsfeedResponseData"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Obtain Bearer token from the Dashboard. Example: 'Authorization: Bearer {token}'"
      },
      "x-rapidapi-key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-rapidapi-key",
        "description": "Use your RapidAPI key in the x-rapidapi-key header."
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    },
    {
      "x-rapidapi-key": []
    }
  ]
}